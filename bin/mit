#!/usr/bin/env ruby

require 'date'

VERSION = 'v0.0.1'.freeze

TODAY = ENV.key?('FIXED_DATE') ? Date.parse(ENV['FIXED_DATE']) : Date.today

class TodoFileParser
  def initialize(todo_file_path)
    @todo_file_path = todo_file_path
  end

  def mits
    todo_lines = File.readlines(@todo_file_path)
    chomped_todos = todo_lines.map(&:chomp)

    not_completed_todos = chomped_todos.reject { |todo| todo.match(/\Ax /) }

    date_and_task_regex = /\{(\d{4}\.\d{2}\.\d{2})\} (.+)\z/
    mit_todos_with_date_and_task = not_completed_todos.select do |todo|
      todo.match(date_and_task_regex)
    end

    mit_todos_with_date_and_task.map do |todo|
      matches = todo.match(date_and_task_regex)
      MIT.new(matches[1], matches[2])
    end
  end
end

class MITListFormatter
  def initialize(mits)
    @mits = mits
  end

  def grouped_by_date
    output_lines = []

    if @mits.any?(&:past_due?)
      output_lines << 'Past due:'
      @mits.select(&:past_due?).each do |mit|
        output_lines << "  #{mit.task}"
      end
      output_lines << ''
    end

    mits_today_or_in_future = @mits.reject(&:past_due?).group_by(&:date)
    sorted_dates = mits_today_or_in_future.keys.sort

    sorted_dates.each do |date|
      mits_for_date = mits_today_or_in_future[date]

      output_lines << DateFormatter.new(date).format
      mits_for_date.each do |mit|
        output_lines << "  #{mit.task}"
      end
      output_lines << ''
    end

    output_lines.join("\n")
  end
end

class DateFormatter
  def initialize(date)
    @date = date
  end

  def format
    raise(StandardError, 'Cannot format date prior to today') if @date < TODAY

    case
    when today?
      'Today:'
    when tomorrow?
      "Tomorrow, #{weekday}:"
    when within_seven_days?
      "#{weekday}:"
    when next_week?
      "#{weekday}, next week, #{@date}:"
    else
      "#{weekday}, #{number_of_weeks_from_now} weeks from now, #{@date}:"
    end
  end

  def today?
    @date == TODAY
  end

  def tomorrow?
    @date == TODAY + 1
  end

  def within_seven_days?
    @date <= TODAY + 7
  end

  def next_week?
    @date.cweek == (TODAY + 7).cweek
  end

  def number_of_weeks_from_now
    # To account for potential transitions between years when counting weeks
    # into the future, step forward week by week and check if the date of the
    # first day that week matches.
    #
    # As the case-statement above has already handled the "next week"-case,
    # start from two weeks into the future.
    two_weeks = 14
    days_in_week = 7

    days_away_from_matching_week =
      (two_weeks..Float::INFINITY).
      step(days_in_week).
      find do |days_into_future|
        future = TODAY + days_into_future.to_i

        start_of_week_for_date = @date - @date.cwday
        start_of_week_in_future = future - future.cwday

        start_of_week_for_date == start_of_week_in_future
      end.to_i

    days_away_from_matching_week / days_in_week
  end

  def weekday
    Date::DAYNAMES[@date.wday]
  end
end

class MIT
  def initialize(date_string, task_string)
    @date_string = date_string
    @task_string = task_string
  end

  def date
    @date ||= Date.parse(@date_string)
  end

  def task
    @task_string
  end

  def past_due?
    date < TODAY
  end
end

class CLI
  def run
    case
    when usage_requested_from_todo_help?
      $stdout.puts usage_message
      exit 0
    when usage_requested?
      $stdout.puts usage_message
      exit 0
    when version_requested?
      $stdout.puts version_message
      exit 0
    when no_action_arguments?
      $stdout.puts all_mits_listing
      exit 0
    end
  end

  private

  def usage_requested_from_todo_help?
    # Normally the add-on will be invoked as a subcommand (like
    # `todo.sh mit foo`), meaning that the actual mit-action, along with its
    # various arguments, will be placed in ARGV[1] and higher.
    #
    # The only exception to this case is when the add-on is invoked through
    # `todo.sh help`. This command will iterate through all available add-ons
    # and invoke them like `mit usage`, meaning that the action will be present
    # in ARGV[0].

    ARGV[0] == 'usage'
  end

  def usage_requested?
    ARGV[1] == 'usage' ||
      ARGV[1] == '-h' ||
      ARGV[1] == '--help'
  end

  def version_requested?
    ARGV[1] == '-v' ||
      ARGV[1] == '--version'
  end

  def no_action_arguments?
    ARGV[2].nil?
  end

  def usage_message
    usage_message = <<-EOF
      Most Important Tasks (MIT):
        Displays Most Important Tasks (MIT) in todo.txt file, or adds new ones.

        mit [-h|--help]

        -h, --help      Displays help message.
        -v, --version   Displays version information.
    EOF

    # Remove leading indentation
    usage_message.gsub(/^#{usage_message.scan(/^[ \t]*(?=\S)/).min}/, '')
  end

  def version_message
    "mit (ruby) #{VERSION}"
  end

  def all_mits_listing
    mits = TodoFileParser.new(ENV['TODO_FILE']).mits

    if mits.empty?
      'No MITs found.'
    else
      MITListFormatter.new(mits).grouped_by_date
    end
  end
end

CLI.new.run
