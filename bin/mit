#!/usr/bin/env ruby

VERSION = 'v0.0.1'.freeze

class CLI
  def run
    show_usage_and_exit if usage_requested_from_todo_help?
    show_usage_and_exit if usage_requested?
    show_version_and_exit if version_requested?
  end

  private

  def usage_requested_from_todo_help?
    # Normally the add-on will be invoked as a subcommand (like
    # `todo.sh mit foo`), meaning that the actual mit-action, along with its
    # various arguments, will be placed in ARGV[1] and higher.
    #
    # The only exception to this case is when the add-on is invoked through
    # `todo.sh help`. This command will iterate through all available add-ons
    # and invoke them like `mit usage`, meaning that the action will be present
    # in ARGV[0].

    ARGV[0] == 'usage'
  end

  def usage_requested?
    ARGV[1] == 'usage' ||
      ARGV[1] == '-h' ||
      ARGV[1] == '--help'
  end

  def version_requested?
    ARGV[1] == '-v' ||
      ARGV[1] == '--version'
  end

  def show_usage_and_exit
    usage_message = <<-EOF
      Most Important Tasks (MIT):
        Displays Most Important Tasks (MIT) in todo.txt file, or adds new ones.

        mit [-h|--help]

        -h, --help      Displays help message.
        -v, --version   Displays version information.
    EOF

    # Remove leading indentation
    usage_message.gsub!(/^#{usage_message.scan(/^[ \t]*(?=\S)/).min}/, '')

    $stdout.puts usage_message
    exit 0
  end

  def show_version_and_exit
    version_message = "mit (ruby) #{VERSION}"

    $stdout.puts version_message
    exit 0
  end
end

CLI.new.run
